// New role assignments
AuditLogs
| where TimeGenerated > ago(60d)
| where OperationName contains "Add member to role"
| where Identity != "MS-PIM"
| where LoggedByService != "PIM"

// New Entra ID Users added to Roles
let NewUsers = AuditLogs
    | where ActivityDisplayName == "Add user"
    | extend UserID = tostring(TargetResources[0].id);
let NewAdmins = AuditLogs
    | where ActivityDisplayName == "Add member to role"
    | extend UserID = tostring(TargetResources[0].id);
NewUsers
    | join (NewAdmins) on UserID
    | project UserCreatedTimestamp=TimeGenerated, UserPrincipalName=tostring(TargetResources[0].userPrincipalName), UserID, AdminRoleAddedTimestamp=TimeGenerated1, AdminRole=tostring(TargetResources1[0].modifiedProperties[1].newValue), InitiatedBy=tostring(InitiatedBy1.user.userPrincipalName)

// Audit actions for roles
AuditLogs 
| where TimeGenerated > ago(90d) 
| extend ActorName = iif( 
                         isnotempty(tostring(InitiatedBy["user"])),  
                         tostring(InitiatedBy["user"]["userPrincipalName"]), 
                         tostring(InitiatedBy["app"]["displayName"]) 
                     ) 
| extend ActorID = iif( 
                       isnotempty(tostring(InitiatedBy["user"])),  
                       tostring(InitiatedBy["user"]["id"]), 
                       tostring(InitiatedBy["app"]["id"]) 
                   ) 
| where isnotempty(ActorName) 
| join (IdentityInfo 
    | where TimeGenerated > ago(7d) 
    | where strlen(tostring(AssignedRoles)) > 2 
    | summarize arg_max(TimeGenerated, *) by AccountUPN 
    | project AccountObjectId, AssignedRoles) 
    on $left.ActorID == $right.AccountObjectId 
| summarize Operations = make_set(OperationName) by ActorName, ActorID, Identity, tostring(AssignedRoles) 
| extend OperationsCount = array_length(Operations) 
| project ActorName, AssignedRoles, Operations, OperationsCount, ActorID, Identity 
| sort by OperationsCount desc
 
// Newly assigned Highly Privileged Roles
let HighlyPriviligedRoles = dynamic(["Global Administrator", "Security Administrator", "Privileged Role Administrator", "Privileged Authentication Administrator", "Application Administrator", "Cloud Application Administrator"]);
AuditLogs
| where TimeGenerated > ago(1d)
| where OperationName in ("Add eligible member to role in PIM completed (permanent)", "Add member to role outside of PIM (permanent)", "Add member to role in PIM completed (permanent)", "Add eligible member to role in PIM requested (permanent)")
| extend ActionExecutedBy = Identity
// Exclude actions taken by PIM.
| where ActionExecutedBy != "Azure AD PIM"
| extend assignedRole = tostring(TargetResources[0].displayName)
| extend assignedTo = tostring(TargetResources[2].displayName)
| extend AUScope = tostring(TargetResources[5].displayName)
// If a user is assigned to a group, get group name
| extend assignedRole = iif(assignedRole != "Member", assignedRole, tostring(TargetResources[3].displayName))
| extend assignedGroup = tostring(TargetResources[3].displayName)
| where assignedRole in (HighlyPriviligedRoles)
| extend AlertText = strcat("A highly priviliged role assignment has been detected. The role ", assignedRole, " has been assigned to ", assignedTo, " by ", ActionExecutedBy, ". ")
